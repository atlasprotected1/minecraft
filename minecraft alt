if game.PlaceId == 2788229376 then

        
    local UserInputService = game:GetService('UserInputService')

  
    local function sortInventory()
        if not shared.paradox.Inventory.Enabled then  
            return
        end
    
        local player = game.Players.LocalPlayer
        local backpack = player:FindFirstChildOfClass("Backpack")
        if not backpack then
            return
        end
    
        local originalItems = {}
        for _, tool in pairs(backpack:GetChildren()) do
            table.insert(originalItems, tool)
        end
    
       
        for _, tool in pairs(backpack:GetChildren()) do
            tool.Parent = nil
        end
    
    
        local function getItemOrder(itemName)
            return shared.paradox.Inventory.Order[itemName.Name] or 999
        end
    
     
        table.sort(originalItems, function(a, b)
            local orderA = getItemOrder(a)
            local orderB = getItemOrder(b)
            return orderA < orderB
        end)
    
    
        for i, tool in ipairs(originalItems) do
            local order = getItemOrder(tool)
            local slot = math.min(order, 10) 
            tool.Parent = backpack
        end
    end
    
  
    UserInputService.InputBegan:Connect(function(input, isProcessed)
        if isProcessed then
            return
        end
    
    
        if input.KeyCode.Name == shared.paradox.Keys.Inventory then
            sortInventory()
        end
    end)
    
    local Player = game:GetService("Players").LocalPlayer
    local isHoldingKey = false
    
 
    Player:GetMouse().KeyDown:Connect(function(Key)
        if shared.paradox.Macro.Settings.Enabled then
            local keybind = shared.paradox.Keys.Macro  
    
            if Key == keybind:lower() then
                if shared.paradox.Macro.Settings.Mode == 'toggle' then
                    shared.paradox.Macro.Configurations.Enabled = not shared.paradox.Macro.Configurations.Enabled
                elseif shared.paradox.Macro.Settings.Mode == 'hold' then
                    isHoldingKey = true
                    shared.paradox.Macro.Configurations.Enabled = true
                end
    
              
                if shared.paradox.Macro.Configurations.Enabled then
                    repeat
                        game:GetService("RunService").Heartbeat:wait()
                        game:GetService("VirtualInputManager"):SendMouseWheelEvent("0", "0", true, game)
                        game:GetService("RunService").Heartbeat:wait()
                        game:GetService("VirtualInputManager"):SendMouseWheelEvent("0", "0", false, game)
                        game:GetService("RunService").Heartbeat:wait()
                    until not shared.paradox.Macro.Configurations.Enabled
                end
            end
        end
    end)
    
  
    Player:GetMouse().KeyUp:Connect(function(Key)
        if shared.paradox.Macro.Settings.Mode == 'hold' and Key == shared.paradox.Keys.Macro:lower() then
            isHoldingKey = false
            shared.paradox.Macro.Configurations.Enabled = false
        end
    end)
    
    



    
    local Players = game:GetService("Players")
    local LocalPlayer = Players.LocalPlayer
    local Camera = game:GetService("Workspace").CurrentCamera
    local UserInputService = game:GetService("UserInputService")
    local RunService = game:GetService("RunService")
    local VirtualInputManager = game:GetService("VirtualInputManager")
    
    local lastClickTime = 0
    local isToggled = false
    local TargetPlayer = nil
    
    local config = shared.paradox.Trigger
    local StartDelay = config.Start 
    local EndDelay = config.End 
    local Key = shared.paradox.Keys.Trigger
    local TriggerEnabled = config.Enabled
    local Mode = config.Mode
    
    if StartDelay >= 0.06 then
        StartDelay = 0.001
    elseif StartDelay < 0.06 then
        if StartDelay < 0.0001 then
            StartDelay = 0.0001
        end
    end
    
    local closeRangeHitboxSize = 0.9
    
    local AllBodyParts = {
        "Head", "UpperTorso", "LowerTorso", "HumanoidRootPart", "LeftHand", "RightHand",
        "LeftLowerArm", "RightLowerArm", "LeftUpperArm", "RightUpperArm", "LeftFoot",
        "LeftLowerLeg", "LeftUpperLeg", "RightLowerLeg", "RightUpperLeg", "RightFoot"
    }
    
    local function isUsingKnife()
        local currentTool = LocalPlayer.Character:FindFirstChildOfClass("Tool")
        if currentTool then
            local toolName = currentTool.Name:lower()
    
            local ignoredTools = {
                "knife", "[knife]", "katana", "[katana]", "[phone]", "[wallet]", "tipjar", "[LockPicker]", "[Hamburger]", "[Pizza]", "[Cranberry]", "[Chicken]", "[Taco]", "[HotDog]", "[Donut]", "[Meat]"
            }
            return table.find(ignoredTools, toolName) ~= nil
        end
        return false
    end
    
    local function IsPlayerKnockedOut(player)
        return player and player.Character and player.Character:FindFirstChild("BodyEffects") and player.Character.BodyEffects["K.O"].Value == true
    end
    
    local function IsPlayerGrabbed(player)
        return player and player.Character and player.Character:FindFirstChild("GRABBING_CONSTRAINT") ~= nil
    end
    
    local function mouse1click(x, y)
        VirtualInputManager:SendMouseButtonEvent(x, y, 0, true, game, false)
        VirtualInputManager:SendMouseButtonEvent(x, y, 0, false, game, false)
    end
    
    local function getMousePosition()
        local mouse = UserInputService:GetMouseLocation()
        return mouse.X, mouse.Y
    end
    
    local function isWithinBox(position)
        local screenPos = Camera:WorldToViewportPoint(position)
        local screenCenter = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y / 2)
        return (Vector2.new(screenPos.X, screenPos.Y) - screenCenter).Magnitude <= Camera.ViewportSize.X / 2
    end
    
    local function isMouseOnTarget(targetPlayer)
        local mouse = LocalPlayer:GetMouse()
        return mouse.Target and mouse.Target:IsDescendantOf(targetPlayer.Character)
    end
    
    local function getVelocity(player)
        local humanoidRootPart = player.Character:FindFirstChild("HumanoidRootPart")
        if humanoidRootPart then
            local velocity = humanoidRootPart.AssemblyLinearVelocity
            return velocity
        end
        return Vector3.zero
    end
    
    local function predictTargetPosition(targetPlayer, deltaTime)
        local partToPredict = targetPlayer.Character:FindFirstChild("HumanoidRootPart")
        if not partToPredict then return targetPlayer.Character.HumanoidRootPart.Position end
    
        local velocity = getVelocity(targetPlayer)
        local predictedPos = partToPredict.Position + velocity * deltaTime
        return predictedPos
    end
    
    local function calculateHitboxSize(distance)
        return closeRangeHitboxSize
    end
    
    local function aimAtTargetBody(targetPlayer)
        for _, bodyPartName in pairs(AllBodyParts) do
            local bodyPart = targetPlayer.Character:FindFirstChild(bodyPartName)
            if bodyPart and bodyPart:IsDescendantOf(targetPlayer.Character) then
                local targetPos = bodyPart.Position
                local distance = (targetPos - Camera.CFrame.Position).Magnitude
    
                local hitboxSize = calculateHitboxSize(distance)
    
                local predictedPos = predictTargetPosition(targetPlayer, 0.1)
    
                local screenPos, onScreen = Camera:WorldToViewportPoint(predictedPos)
    
                if onScreen and isWithinBox(predictedPos) then
                    local mousePos = Vector2.new(screenPos.X, screenPos.Y)
    
                    local jitter = Vector2.new(
                        math.random(-hitboxSize * 2, hitboxSize * 2),
                        math.random(-hitboxSize * 2, hitboxSize * 2)
                    )
                    local adjustedMousePos = mousePos + jitter
    
                    local currentMousePosX, currentMousePosY = getMousePosition()
                    local moveSpeed = 0.1
    
                    local newX = currentMousePosX + (adjustedMousePos.X - currentMousePosX) * moveSpeed
                    local newY = currentMousePosY + (adjustedMousePos.Y - currentMousePosY) * moveSpeed
    
                    newX = math.clamp(newX, 0, Camera.ViewportSize.X)
                    newY = math.clamp(newY, 0, Camera.ViewportSize.Y)
    
                  
                    local currentTime = os.clock()
                    local delayTime = math.random() * (EndDelay - StartDelay) + StartDelay
    
                    if currentTime - lastClickTime >= delayTime and not isUsingKnife() then
                        lastClickTime = currentTime
    
                        local mouseX, mouseY = getMousePosition()
                        mouse1click(mouseX, mouseY)
                    end
                end
            end
        end
    end
    
    local function TriggerAction()
        if TargetPlayer and TargetPlayer.Character then
            local humanoid = TargetPlayer.Character:FindFirstChild("Humanoid")
            if humanoid and humanoid.Health > 0 and not IsPlayerKnockedOut(TargetPlayer) and not IsPlayerGrabbed(TargetPlayer) then
                if isMouseOnTarget(TargetPlayer) then
                    aimAtTargetBody(TargetPlayer)
                end
            else
                TargetPlayer = nil
            end
        end
    end
    
    UserInputService.InputBegan:Connect(function(input, gameProcessed)
        if not gameProcessed and input.KeyCode.Name == Key then
            if Mode == "toggle" then
                isToggled = not isToggled
            elseif Mode == "hold" then
                isToggled = true
            end
        end
    end)
    
    UserInputService.InputEnded:Connect(function(input, gameProcessed)
        if not gameProcessed and input.KeyCode.Name == Key and Mode == "hold" then
            isToggled = false
        end
    end)
    
    RunService.RenderStepped:Connect(function()
        if TriggerEnabled and isToggled then
            TriggerAction()
        end
    end)
    
    
    
    
    
    
    
    
    
    
    local Players = game:GetService("Players")
    local LocalPlayer = Players.LocalPlayer
    local Mouse = LocalPlayer:GetMouse()
    local RunService = game:GetService("RunService")
    local Camera = game.Workspace.CurrentCamera
    
    local FOV = shared.paradox.Camera.FOV
    local isRightMouseButtonDown = false
    local whitelist = shared.paradox.Core.Checks.Whitelist
    
    local FIRST_PERSON_THRESHOLD = 5
    local THIRD_PERSON_THRESHOLD = 10
    local DETECTION_SCALE = 0.03
    
   
    local MAX_TARGET_DISTANCE = shared.paradox.Camera.Distance or 30  
    
   
    local function IsFirstPerson()
        local playerPosition = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
        if playerPosition then
            local cameraPosition = Camera.CFrame.Position
            local distance = (cameraPosition - playerPosition.Position).Magnitude
            return distance < FIRST_PERSON_THRESHOLD
        end
        return false
    end
    
    
    local function IsThirdPerson()
        local playerPosition = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
        if playerPosition then
            local cameraPosition = Camera.CFrame.Position
            local distance = (cameraPosition - playerPosition.Position).Magnitude
            return distance > THIRD_PERSON_THRESHOLD
        end
        return false
    end
    
    local function UpdateFOV()
    end
    
    RunService.RenderStepped:Connect(UpdateFOV)
    
    
    local function ClosestPlrFromMouse()
        local Target, Closest = nil, math.huge
        local enabled = shared.paradox.Core.Enabled
        local whitelist = shared.paradox.Core.Checks.Whitelist
    
        for _, player in pairs(Players:GetPlayers()) do
            if player ~= LocalPlayer and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                if enabled and table.find(whitelist, player.Name) then
                    break
                end
    
                local Position, OnScreen = Camera:WorldToScreenPoint(player.Character.HumanoidRootPart.Position)
                local Distance = (Vector2.new(Position.X, Position.Y) - Vector2.new(Mouse.X, Mouse.Y)).Magnitude
                Distance = Distance * DETECTION_SCALE
    
                if Distance < Closest and OnScreen then
                    Closest = Distance
                    Target = player
                end
            end
        end
        return Target
    end
    

    local function GetClosestBodyPart(character)
        local ClosestDistance = math.huge
        local BodyPart = nil
    
        if character and character:IsDescendantOf(game.Workspace) then
            for _, part in ipairs(character:GetChildren()) do
                if part:IsA("BasePart") then
                    local Position, OnScreen = Camera:WorldToScreenPoint(part.Position)
                    if OnScreen then
                        local Distance = (Vector2.new(Position.X, Position.Y) - Vector2.new(Mouse.X, Mouse.Y)).Magnitude
                        if Distance < ClosestDistance then
                            ClosestDistance = Distance
                            BodyPart = part
                        end
                    end
                end
            end
        end
        return BodyPart
    end
    
   
    local function IsTargetInRange(targetPlayer)
        local playerPosition = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
        if playerPosition and targetPlayer and targetPlayer.Character then
            local targetPosition = targetPlayer.Character.HumanoidRootPart.Position
            local distance = (targetPosition - playerPosition.Position).Magnitude
            return distance <= MAX_TARGET_DISTANCE
        end
        return false
    end
    
    local function GetTarget()
        return TargetPlayer
    end
    
    Mouse.Button2Down:Connect(function()
        if shared.paradox.Camera.MouseButton2 then
            isRightMouseButtonDown = true
        end
    end)
    
    Mouse.Button2Up:Connect(function()
        isRightMouseButtonDown = false
    end)
    
  
    local function IsTargetVisible(targetPlayer, bodyPart)
        if targetPlayer and bodyPart then
            local ray = Ray.new(Camera.CFrame.Position, (bodyPart.Position - Camera.CFrame.Position).unit * 500)
            local hitPart = workspace:FindPartOnRay(ray, LocalPlayer.Character)
            
            if hitPart and hitPart.Parent ~= targetPlayer.Character then
                return false
            end
        end
        return true
    end
    

   





    Mouse.KeyDown:Connect(function(Key)
        local key = Key:lower()
    
        if key == shared.paradox.Keys.Target:lower() then
            if shared.paradox.Camera.Enabled then
                if IsTargeting then
                    if TargetPlayer and TargetPlayer.Character and TargetPlayer.Character:FindFirstChildOfClass("Humanoid") then
                        local humanoid = TargetPlayer.Character.Humanoid
                        if humanoid.Health >= 1 and not IsPlayerKnockedOut(TargetPlayer) and not IsPlayerGrabbed(TargetPlayer) then
                            if IsTargetInRange(TargetPlayer) then
                                if ClosestPlrFromMouse() ~= TargetPlayer then
                                    local newTarget = ClosestPlrFromMouse()
                                    if newTarget and newTarget.Character and newTarget.Character:FindFirstChildOfClass("Humanoid").Health >= 1 and not IsPlayerKnockedOut(newTarget) and not IsPlayerGrabbed(newTarget) then
                                        TargetPlayer = newTarget
                                    end
                                end
                            else
                               
                                TargetPlayer = nil
                                IsTargeting = false
                            end
                        else
                            TargetPlayer = nil
                            IsTargeting = false
                        end
                    end
                else
                    local initialTarget = ClosestPlrFromMouse()
                    if initialTarget and initialTarget.Character and initialTarget.Character:FindFirstChildOfClass("Humanoid").Health >= 1 and not IsPlayerKnockedOut(initialTarget) and not IsPlayerGrabbed(initialTarget) then
                        if IsTargetInRange(initialTarget) then
                            IsTargeting = true
                            TargetPlayer = initialTarget
                        end
                    end
                end
            end
        end
    
        if key == shared.paradox.Keys.Cancel:lower() then
            IsTargeting = false
            TargetPlayer = nil
        end
    end)
    
    local function IsPlayerKnockedOut(player)
        return player and player.Character and player.Character:FindFirstChild("BodyEffects") and player.Character.BodyEffects["K.O"].Value == true
    end
    
    local function IsPlayerGrabbed(player)
        return player and player.Character and player.Character:FindFirstChild("GRABBING_CONSTRAINT") ~= nil
    end
    
    local function IsAlignedWithCamera(targetPlayer)
       if targetPlayer and targetPlayer.Character then
           local targetPosition = targetPlayer.Character.HumanoidRootPart.Position
           local cameraPosition = Camera.CFrame.Position
           local direction = (targetPosition - cameraPosition).unit
           local targetDirection = Camera.CFrame.LookVector.unit
   
        
           local distance = (targetPosition - cameraPosition).Magnitude
   
         
           local dotThreshold = 0.98  
   
           
           if distance > 50 then  
               dotThreshold = 0.95  
           end
   
           
           return direction:Dot(targetDirection) > dotThreshold
       end
       return false
   end
   
   
    
    local function GetDistanceFromMouse(bodyPart)
        local mousePosition = game:GetService("Players").LocalPlayer:GetMouse().Hit.p
        return (bodyPart.Position - mousePosition).Magnitude
    end
    
    RunService.RenderStepped:Connect(function()
        if IsTargeting and TargetPlayer and TargetPlayer.Character then
            local humanoid = TargetPlayer.Character:FindFirstChildOfClass("Humanoid")
            if not humanoid or humanoid.Health < 1 or IsPlayerKnockedOut(TargetPlayer) or IsPlayerGrabbed(TargetPlayer) then
                TargetPlayer = nil
                IsTargeting = false
                return
            end
            
            if shared.paradox.Camera.Enabled then
                if shared.paradox.Camera.Configurations.Value == 0 then
                    return
                end
    
                if shared.paradox.Camera.MouseButton2 then
                    if isRightMouseButtonDown then
                        if shared.paradox.Camera.Configurations.ThirdPerson == false then
                            if IsFirstPerson() then
                                if IsAlignedWithCamera(TargetPlayer) then
                                    local head = TargetPlayer.Character:FindFirstChild("Head")
                                    local lowerTorso = TargetPlayer.Character:FindFirstChild("LowerTorso")
                                    local bodyPart = nil
    
                                    if head and lowerTorso then
                                        local distanceToHead = GetDistanceFromMouse(head)
                                        local distanceToLowerTorso = GetDistanceFromMouse(lowerTorso)
    
                                        if distanceToHead < distanceToLowerTorso then
                                            bodyPart = head
                                        else
                                            bodyPart = lowerTorso
                                        end
                                    elseif head then
                                        bodyPart = head
                                    elseif lowerTorso then
                                        bodyPart = lowerTorso
                                    end
    
                                    if bodyPart and IsTargetVisible(TargetPlayer, bodyPart) then
                                        local targetPosition = bodyPart.Position
                                        local playerPosition = TargetPlayer.Character.HumanoidRootPart.Position
                                        local distanceToTarget = (targetPosition - playerPosition).Magnitude
                                        
                                        if distanceToTarget <= math.sqrt(FOV^2 + FOV^2 + FOV^2) then
                                            local predictedPosition
                                            
                                            if shared.paradox.Camera.Resolver then
                                                local humanoid = TargetPlayer.Character:FindFirstChildOfClass("Humanoid")
                                                if humanoid then
                                                    local moveDirection = humanoid.MoveDirection
                                                    predictedPosition = bodyPart.Position + (moveDirection * Vector3.new(
                                                        shared.paradox.Camera.Prediction.X,
                                                        shared.paradox.Camera.Prediction.Y,
                                                        shared.paradox.Camera.Prediction.Z
                                                    ))
                                                end
                                            else
                                                local targetVelocity = TargetPlayer.Character.HumanoidRootPart.Velocity
                                                predictedPosition = bodyPart.Position + (targetVelocity * Vector3.new(
                                                    shared.paradox.Camera.Prediction.X,
                                                    shared.paradox.Camera.Prediction.Y,
                                                    shared.paradox.Camera.Prediction.Z
                                                ))
                                            end
    
                                            if shared.paradox.Camera.Configurations.Value ~= 0 then
                                                if predictedPosition then
                                                    local currentPosition = Camera.CFrame.Position
                                                    local randomness = math.random(95, 105) / 100
                                                    local smoothFactor = shared.paradox.Camera.Configurations.Value * randomness
    
                                                    local DesiredCFrame = CFrame.new(currentPosition, predictedPosition)
                                                    Camera.CFrame = Camera.CFrame:Lerp(DesiredCFrame, smoothFactor)
                                                end
                                            end
                                        end
                                    end
                                end
                            end
                        end
                    end
                else
                    if shared.paradox.Camera.Configurations.ThirdPerson == false then
                        if IsFirstPerson() then
                            if IsAlignedWithCamera(TargetPlayer) then
                                local head = TargetPlayer.Character:FindFirstChild("Head")
                                local lowerTorso = TargetPlayer.Character:FindFirstChild("LowerTorso")
                                local bodyPart = nil
    
                                if head and lowerTorso then
                                    local distanceToHead = GetDistanceFromMouse(head)
                                    local distanceToLowerTorso = GetDistanceFromMouse(lowerTorso)
    
                                    if distanceToHead < distanceToLowerTorso then
                                        bodyPart = head
                                    else
                                        bodyPart = lowerTorso
                                    end
                                elseif head then
                                    bodyPart = head
                                elseif lowerTorso then
                                    bodyPart = lowerTorso
                                end
    
                                if bodyPart and IsTargetVisible(TargetPlayer, bodyPart) then
                                    local targetPosition = bodyPart.Position
                                    local playerPosition = TargetPlayer.Character.HumanoidRootPart.Position
                                    local distanceToTarget = (targetPosition - playerPosition).Magnitude
    
                                    if distanceToTarget <= math.sqrt(FOV.X^2 + FOV.Y^2 + FOV.Z^2) then
                                        local predictedPosition
    
                                        if shared.paradox.Camera.Resolver then
                                            local humanoid = TargetPlayer.Character:FindFirstChildOfClass("Humanoid")
                                            if humanoid then
                                                local moveDirection = humanoid.MoveDirection
                                                predictedPosition = bodyPart.Position + (moveDirection * Vector3.new(
                                                    shared.paradox.Camera.Prediction.X,
                                                    shared.paradox.Camera.Prediction.Y,
                                                    shared.paradox.Camera.Prediction.Z
                                                ))
                                            end
                                        else
                                            local targetVelocity = TargetPlayer.Character.HumanoidRootPart.Velocity
                                            predictedPosition = bodyPart.Position + (targetVelocity * Vector3.new(
                                                shared.paradox.Camera.Prediction.X,
                                                shared.paradox.Camera.Prediction.Y,
                                                shared.paradox.Camera.Prediction.Z
                                            ))
                                        end
    
                                        if shared.paradox.Camera.Configurations.Value ~= 0 then
                                           if predictedPosition then
                                               local currentPosition = Camera.CFrame.Position
                                               local randomness = math.random(95, 105) / 100
                                              
                                               local smoothFactor = (shared.paradox.Camera.Configurations.Value * randomness) * 0.1  
                                       
                                               local DesiredCFrame = CFrame.new(currentPosition, predictedPosition)
                                               Camera.CFrame = Camera.CFrame:Lerp(DesiredCFrame, smoothFactor)
                                           end
                                       end 
                                    end
                                end
                            end
                        end
                    end
                end
            end
        end
    end)
    
    
   
   
   
    game:GetService('RunService').RenderStepped:Connect(function()
        local config = shared.paradox.Hitbox
        if not config.Enabled then return end
    
        local localPlayer = game:GetService('Players').LocalPlayer
        if not localPlayer or not localPlayer.Character then return end
    
        local character = localPlayer.Character
        local currentWeapon = character:FindFirstChildOfClass("Tool")
        if not currentWeapon then return end
    
        local currentGunConfig = config.Guns[currentWeapon.Name]
        if not currentGunConfig then return end
    
        local localPlayerTeam = localPlayer.Team
    
        for _, player in ipairs(game:GetService('Players'):GetPlayers()) do
            if player ~= localPlayer and (not IsTeamCheckEnabled or player.Team ~= localPlayerTeam) then
                local playerCharacter = player.Character
                local humanoidRootPart = playerCharacter and playerCharacter:FindFirstChild("HumanoidRootPart")
                if humanoidRootPart then
                  
                    local newHeight = currentGunConfig.H or 0.4  
                    local newWidth = currentGunConfig.W or 0.4   
    
                
                    if TargetPlayer == player then
                        humanoidRootPart.Size = Vector3.new(newWidth * 2, newHeight * 2, newWidth * 2)
                        humanoidRootPart.CanCollide = false
                    else
                        humanoidRootPart.Size = Vector3.new(2, 2, 2) 
                        humanoidRootPart.CanCollide = false
                    end
                end
            end
        end
    end)



    UserInputService.InputEnded:Connect(function(input, isProcessed)
        if input.KeyCode == Enum.KeyCode[shared.paradox.Keys.Target:upper()] and shared.paradox.Camera.Method == "hold" then  -- Updated to Keybind
            holdingMouseButton = false
        end
    end)
    


else



    

            local UserInputService = game:GetService('UserInputService')
    
          
            local function sortInventory()
                if not shared.paradox.Inventory.Enabled then  
                    return
                end
            
                local player = game.Players.LocalPlayer
                local backpack = player:FindFirstChildOfClass("Backpack")
                if not backpack then
                    return
                end
            
                local originalItems = {}
                for _, tool in pairs(backpack:GetChildren()) do
                    table.insert(originalItems, tool)
                end
            
               
                for _, tool in pairs(backpack:GetChildren()) do
                    tool.Parent = nil
                end
            
            
                local function getItemOrder(itemName)
                    return shared.paradox.Inventory.Order[itemName.Name] or 999
                end
            
             
                table.sort(originalItems, function(a, b)
                    local orderA = getItemOrder(a)
                    local orderB = getItemOrder(b)
                    return orderA < orderB
                end)
            
            
                for i, tool in ipairs(originalItems) do
                    local order = getItemOrder(tool)
                    local slot = math.min(order, 10) 
                    tool.Parent = backpack
                end
            end
            
          
            UserInputService.InputBegan:Connect(function(input, isProcessed)
                if isProcessed then
                    return
                end
            
            
                if input.KeyCode.Name == shared.paradox.Keys.Inventory then
                    sortInventory()
                end
            end)
            
            local Player = game:GetService("Players").LocalPlayer
            local isHoldingKey = false
            
         
            Player:GetMouse().KeyDown:Connect(function(Key)
                if shared.paradox.Macro.Settings.Enabled then
                    local keybind = shared.paradox.Keys.Macro  
            
                    if Key == keybind:lower() then
                        if shared.paradox.Macro.Settings.Mode == 'toggle' then
                            shared.paradox.Macro.Configurations.Enabled = not shared.paradox.Macro.Configurations.Enabled
                        elseif shared.paradox.Macro.Settings.Mode == 'hold' then
                            isHoldingKey = true
                            shared.paradox.Macro.Configurations.Enabled = true
                        end
            
                      
                        if shared.paradox.Macro.Configurations.Enabled then
                            repeat
                                game:GetService("RunService").Heartbeat:wait()
                                game:GetService("VirtualInputManager"):SendMouseWheelEvent("0", "0", true, game)
                                game:GetService("RunService").Heartbeat:wait()
                                game:GetService("VirtualInputManager"):SendMouseWheelEvent("0", "0", false, game)
                                game:GetService("RunService").Heartbeat:wait()
                            until not shared.paradox.Macro.Configurations.Enabled
                        end
                    end
                end
            end)
            
          
            Player:GetMouse().KeyUp:Connect(function(Key)
                if shared.paradox.Macro.Settings.Mode == 'hold' and Key == shared.paradox.Keys.Macro:lower() then
                    isHoldingKey = false
                    shared.paradox.Macro.Configurations.Enabled = false
                end
            end)
            
            
    
    
    
            
            local Players = game:GetService("Players")
            local LocalPlayer = Players.LocalPlayer
            local Camera = game:GetService("Workspace").CurrentCamera
            local UserInputService = game:GetService("UserInputService")
            local RunService = game:GetService("RunService")
            local VirtualInputManager = game:GetService("VirtualInputManager")
            
            local lastClickTime = 0
            local isToggled = false
            local TargetPlayer = nil
            
            local config = shared.paradox.Trigger
            local StartDelay = config.Start 
            local EndDelay = config.End 
            local Key = shared.paradox.Keys.Trigger
            local TriggerEnabled = config.Enabled
            local Mode = config.Mode
            
            if StartDelay >= 0.06 then
                StartDelay = 0.001
            elseif StartDelay < 0.06 then
                if StartDelay < 0.0001 then
                    StartDelay = 0.0001
                end
            end
            
            local closeRangeHitboxSize = 0.9
            
            local AllBodyParts = {
                "Head", "UpperTorso", "LowerTorso", "HumanoidRootPart", "LeftHand", "RightHand",
                "LeftLowerArm", "RightLowerArm", "LeftUpperArm", "RightUpperArm", "LeftFoot",
                "LeftLowerLeg", "LeftUpperLeg", "RightLowerLeg", "RightUpperLeg", "RightFoot"
            }
            
            -- Prediction method integration
            local OldTime = shared.paradox['Silent'].Prediction
            
            local function GetVelocity(player, part)
                if player and player.Character then
                    local velocity = player.Character[part].Velocity
            
                    local distortionX = shared.paradox['Silent'].Prediction.X
                    local distortionY = shared.paradox['Silent'].Prediction.Y
                    local distortionZ = shared.paradox['Silent'].Prediction.Z
            
                    local adjustedVelocity = Vector3.new(
                        velocity.X * distortionX,
                        velocity.Y * distortionY,
                        velocity.Z * distortionZ
                    )
            
                    if adjustedVelocity.Y < -30 then
                        shared.paradox['Silent'].Prediction = { X = 0, Y = 0, Z = 0 }
                        return adjustedVelocity
                    elseif adjustedVelocity.Magnitude > 50 then
                        return player.Character:FindFirstChild("Humanoid").MoveDirection * 16 * distortionX
                    else
                        shared.paradox['Silent'].Prediction = OldTime
                        return adjustedVelocity
                    end
                end
                return Vector3.new(0, 0, 0)
            end
            
            local function predictTargetPosition(targetPlayer, deltaTime)
                local partToPredict = targetPlayer.Character:FindFirstChild("HumanoidRootPart")
                if not partToPredict then return targetPlayer.Character.HumanoidRootPart.Position end
            
                local adjustedVelocity = GetVelocity(targetPlayer, "HumanoidRootPart")
                local predictedPos = partToPredict.Position + adjustedVelocity * deltaTime
                return predictedPos
            end
            
            local function isUsingKnife()
                local currentTool = LocalPlayer.Character:FindFirstChildOfClass("Tool")
                if currentTool then
                    local toolName = currentTool.Name:lower()
            
                    local ignoredTools = {
                        "knife", "[knife]", "katana", "[katana]", "[phone]", "[wallet]", "tipjar", "[LockPicker]", "[Hamburger]", "[Pizza]", "[Cranberry]", "[Chicken]", "[Taco]", "[HotDog]", "[Donut]", "[Meat]"
                    }
                    return table.find(ignoredTools, toolName) ~= nil
                end
                return false
            end
            
            local function IsPlayerKnockedOut(player)
                return player and player.Character and player.Character:FindFirstChild("BodyEffects") and player.Character.BodyEffects["K.O"].Value == true
            end
            
            local function IsPlayerGrabbed(player)
                return player and player.Character and player.Character:FindFirstChild("GRABBING_CONSTRAINT") ~= nil
            end
            
            local function mouse1click(x, y)
                VirtualInputManager:SendMouseButtonEvent(x, y, 0, true, game, false)
                VirtualInputManager:SendMouseButtonEvent(x, y, 0, false, game, false)
            end
            
            local function getMousePosition()
                local mouse = UserInputService:GetMouseLocation()
                return mouse.X, mouse.Y
            end
            
            local function isWithinBox(position)
                local screenPos = Camera:WorldToViewportPoint(position)
                local screenCenter = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y / 2)
                return (Vector2.new(screenPos.X, screenPos.Y) - screenCenter).Magnitude <= Camera.ViewportSize.X / 2
            end
            
            local function isMouseOnTarget(targetPlayer)
                local mouse = LocalPlayer:GetMouse()
                return mouse.Target and mouse.Target:IsDescendantOf(targetPlayer.Character)
            end
            
            local function calculateHitboxSize(distance)
                return closeRangeHitboxSize
            end
            
            local function aimAtTargetBody(targetPlayer)
                for _, bodyPartName in pairs(AllBodyParts) do
                    local bodyPart = targetPlayer.Character:FindFirstChild(bodyPartName)
                    if bodyPart and bodyPart:IsDescendantOf(targetPlayer.Character) then
                        local targetPos = bodyPart.Position
                        local distance = (targetPos - Camera.CFrame.Position).Magnitude
            
                        local hitboxSize = calculateHitboxSize(distance)
            
                        local predictedPos = predictTargetPosition(targetPlayer, 0.1)
            
                        local screenPos, onScreen = Camera:WorldToViewportPoint(predictedPos)
            
                        if onScreen and isWithinBox(predictedPos) then
                            local mousePos = Vector2.new(screenPos.X, screenPos.Y)
            
                            local jitter = Vector2.new(
                                math.random(-hitboxSize * 2, hitboxSize * 2),
                                math.random(-hitboxSize * 2, hitboxSize * 2)
                            )
                            local adjustedMousePos = mousePos + jitter
            
                            local currentMousePosX, currentMousePosY = getMousePosition()
                            local moveSpeed = 0.1
            
                            local newX = currentMousePosX + (adjustedMousePos.X - currentMousePosX) * moveSpeed
                            local newY = currentMousePosY + (adjustedMousePos.Y - currentMousePosY) * moveSpeed
            
                            newX = math.clamp(newX, 0, Camera.ViewportSize.X)
                            newY = math.clamp(newY, 0, Camera.ViewportSize.Y)
            
                         
                            local currentTime = os.clock()
                            local delayTime = math.random() * (EndDelay - StartDelay) + StartDelay
            
                            if currentTime - lastClickTime >= delayTime and not isUsingKnife() then
                                lastClickTime = currentTime
            
                                local mouseX, mouseY = getMousePosition()
                                mouse1click(mouseX, mouseY)
                            end
                        end
                    end
                end
            end
            
            local function TriggerAction()
                if TargetPlayer and TargetPlayer.Character then
                    local humanoid = TargetPlayer.Character:FindFirstChild("Humanoid")
                    if humanoid and humanoid.Health > 0 and not IsPlayerKnockedOut(TargetPlayer) and not IsPlayerGrabbed(TargetPlayer) then
                        if isMouseOnTarget(TargetPlayer) then
                            aimAtTargetBody(TargetPlayer)
                        end
                    else
                        TargetPlayer = nil
                    end
                end
            end
            
            UserInputService.InputBegan:Connect(function(input, gameProcessed)
                if not gameProcessed and input.KeyCode.Name == Key then
                    if Mode == "toggle" then
                        isToggled = not isToggled
                    elseif Mode == "hold" then
                        isToggled = true
                    end
                end
            end)
            
            UserInputService.InputEnded:Connect(function(input, gameProcessed)
                if not gameProcessed and input.KeyCode.Name == Key and Mode == "hold" then
                    isToggled = false
                end
            end)
            
            RunService.RenderStepped:Connect(function()
                if TriggerEnabled and isToggled then
                    TriggerAction()
                end
            end)
            
            
            
            
            
            
            
            
            local Players = game:GetService("Players")
            local LocalPlayer = Players.LocalPlayer
            local Mouse = LocalPlayer:GetMouse()
            local RunService = game:GetService("RunService")
            local Camera = game.Workspace.CurrentCamera
            
            local FOV = shared.paradox.Camera.FOV
            local isRightMouseButtonDown = false
            local whitelist = shared.paradox.Core.Checks.Whitelist
            
            local FIRST_PERSON_THRESHOLD = 5
            local THIRD_PERSON_THRESHOLD = 10
            local DETECTION_SCALE = 0.03
            
           
            local MAX_TARGET_DISTANCE = shared.paradox.Camera.Distance or 30  
            
           
            local function IsFirstPerson()
                local playerPosition = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
                if playerPosition then
                    local cameraPosition = Camera.CFrame.Position
                    local distance = (cameraPosition - playerPosition.Position).Magnitude
                    return distance < FIRST_PERSON_THRESHOLD
                end
                return false
            end
            
            
            local function IsThirdPerson()
                local playerPosition = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
                if playerPosition then
                    local cameraPosition = Camera.CFrame.Position
                    local distance = (cameraPosition - playerPosition.Position).Magnitude
                    return distance > THIRD_PERSON_THRESHOLD
                end
                return false
            end
            
            local function UpdateFOV()
            end
            
            RunService.RenderStepped:Connect(UpdateFOV)
            
            
            local function ClosestPlrFromMouse()
                local Target, Closest = nil, math.huge
                local enabled = shared.paradox.Core.Enabled
                local whitelist = shared.paradox.Core.Checks.Whitelist
            
                for _, player in pairs(Players:GetPlayers()) do
                    if player ~= LocalPlayer and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                        if enabled and table.find(whitelist, player.Name) then
                            break
                        end
            
                        local Position, OnScreen = Camera:WorldToScreenPoint(player.Character.HumanoidRootPart.Position)
                        local Distance = (Vector2.new(Position.X, Position.Y) - Vector2.new(Mouse.X, Mouse.Y)).Magnitude
                        Distance = Distance * DETECTION_SCALE
            
                        if Distance < Closest and OnScreen then
                            Closest = Distance
                            Target = player
                        end
                    end
                end
                return Target
            end
            
        
            local function GetClosestBodyPart(character)
                local ClosestDistance = math.huge
                local BodyPart = nil
            
                if character and character:IsDescendantOf(game.Workspace) then
                    for _, part in ipairs(character:GetChildren()) do
                        if part:IsA("BasePart") then
                            local Position, OnScreen = Camera:WorldToScreenPoint(part.Position)
                            if OnScreen then
                                local Distance = (Vector2.new(Position.X, Position.Y) - Vector2.new(Mouse.X, Mouse.Y)).Magnitude
                                if Distance < ClosestDistance then
                                    ClosestDistance = Distance
                                    BodyPart = part
                                end
                            end
                        end
                    end
                end
                return BodyPart
            end
            
           
            local function IsTargetInRange(targetPlayer)
                local playerPosition = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
                if playerPosition and targetPlayer and targetPlayer.Character then
                    local targetPosition = targetPlayer.Character.HumanoidRootPart.Position
                    local distance = (targetPosition - playerPosition.Position).Magnitude
                    return distance <= MAX_TARGET_DISTANCE
                end
                return false
            end
            
            local function GetTarget()
                return TargetPlayer
            end
            
            Mouse.Button2Down:Connect(function()
                if shared.paradox.Camera.MouseButton2 then
                    isRightMouseButtonDown = true
                end
            end)
            
            Mouse.Button2Up:Connect(function()
                isRightMouseButtonDown = false
            end)
            
          
            local function IsTargetVisible(targetPlayer, bodyPart)
                if targetPlayer and bodyPart then
                    local ray = Ray.new(Camera.CFrame.Position, (bodyPart.Position - Camera.CFrame.Position).unit * 500)
                    local hitPart = workspace:FindPartOnRay(ray, LocalPlayer.Character)
                    
                    if hitPart and hitPart.Parent ~= targetPlayer.Character then
                        return false
                    end
                end
                return true
            end
            
    
           
    
    
    
    
    
            Mouse.KeyDown:Connect(function(Key)
                local key = Key:lower()
            
                if key == shared.paradox.Keys.Target:lower() then
                    if shared.paradox.Camera.Enabled then
                        if IsTargeting then
                            if TargetPlayer and TargetPlayer.Character and TargetPlayer.Character:FindFirstChildOfClass("Humanoid") then
                                local humanoid = TargetPlayer.Character.Humanoid
                                if humanoid.Health >= 1 and not IsPlayerKnockedOut(TargetPlayer) and not IsPlayerGrabbed(TargetPlayer) then
                                    if IsTargetInRange(TargetPlayer) then
                                        if ClosestPlrFromMouse() ~= TargetPlayer then
                                            local newTarget = ClosestPlrFromMouse()
                                            if newTarget and newTarget.Character and newTarget.Character:FindFirstChildOfClass("Humanoid").Health >= 1 and not IsPlayerKnockedOut(newTarget) and not IsPlayerGrabbed(newTarget) then
                                                TargetPlayer = newTarget
                                            end
                                        end
                                    else
                                       
                                        TargetPlayer = nil
                                        IsTargeting = false
                                    end
                                else
                                    TargetPlayer = nil
                                    IsTargeting = false
                                end
                            end
                        else
                            local initialTarget = ClosestPlrFromMouse()
                            if initialTarget and initialTarget.Character and initialTarget.Character:FindFirstChildOfClass("Humanoid").Health >= 1 and not IsPlayerKnockedOut(initialTarget) and not IsPlayerGrabbed(initialTarget) then
                                if IsTargetInRange(initialTarget) then
                                    IsTargeting = true
                                    TargetPlayer = initialTarget
                                end
                            end
                        end
                    end
                end
            
                if key == shared.paradox.Keys.Cancel:lower() then
                    IsTargeting = false
                    TargetPlayer = nil
                end
            end)
            
            local function IsPlayerKnockedOut(player)
                return player and player.Character and player.Character:FindFirstChild("BodyEffects") and player.Character.BodyEffects["K.O"].Value == true
            end
            
            local function IsPlayerGrabbed(player)
                return player and player.Character and player.Character:FindFirstChild("GRABBING_CONSTRAINT") ~= nil
            end
            
            local function IsAlignedWithCamera(targetPlayer)
               if targetPlayer and targetPlayer.Character then
                   local targetPosition = targetPlayer.Character.HumanoidRootPart.Position
                   local cameraPosition = Camera.CFrame.Position
                   local direction = (targetPosition - cameraPosition).unit
                   local targetDirection = Camera.CFrame.LookVector.unit
           
                
                   local distance = (targetPosition - cameraPosition).Magnitude
           
                 
                   local dotThreshold = 0.98  
           
                   
                   if distance > 50 then  
                       dotThreshold = 0.95  
                   end
           
                   
                   return direction:Dot(targetDirection) > dotThreshold
               end
               return false
           end
           
           
            
            local function GetDistanceFromMouse(bodyPart)
                local mousePosition = game:GetService("Players").LocalPlayer:GetMouse().Hit.p
                return (bodyPart.Position - mousePosition).Magnitude
            end
            
            RunService.RenderStepped:Connect(function()
                if IsTargeting and TargetPlayer and TargetPlayer.Character then
                    local humanoid = TargetPlayer.Character:FindFirstChildOfClass("Humanoid")
                    if not humanoid or humanoid.Health < 1 or IsPlayerKnockedOut(TargetPlayer) or IsPlayerGrabbed(TargetPlayer) then
                        TargetPlayer = nil
                        IsTargeting = false
                        return
                    end
                    
                    if shared.paradox.Camera.Enabled then
                        if shared.paradox.Camera.Configurations.Value == 0 then
                            return
                        end
            
                        if shared.paradox.Camera.MouseButton2 then
                            if isRightMouseButtonDown then
                                if shared.paradox.Camera.Configurations.ThirdPerson == false then
                                    if IsFirstPerson() then
                                        if IsAlignedWithCamera(TargetPlayer) then
                                            local head = TargetPlayer.Character:FindFirstChild("Head")
                                            local lowerTorso = TargetPlayer.Character:FindFirstChild("LowerTorso")
                                            local bodyPart = nil
            
                                            if head and lowerTorso then
                                                local distanceToHead = GetDistanceFromMouse(head)
                                                local distanceToLowerTorso = GetDistanceFromMouse(lowerTorso)
            
                                                if distanceToHead < distanceToLowerTorso then
                                                    bodyPart = head
                                                else
                                                    bodyPart = lowerTorso
                                                end
                                            elseif head then
                                                bodyPart = head
                                            elseif lowerTorso then
                                                bodyPart = lowerTorso
                                            end
            
                                            if bodyPart and IsTargetVisible(TargetPlayer, bodyPart) then
                                                local targetPosition = bodyPart.Position
                                                local playerPosition = TargetPlayer.Character.HumanoidRootPart.Position
                                                local distanceToTarget = (targetPosition - playerPosition).Magnitude
                                                
                                                if distanceToTarget <= math.sqrt(FOV^2 + FOV^2 + FOV^2) then
                                                    local predictedPosition
                                                    
                                                    if shared.paradox.Camera.Resolver then
                                                        local humanoid = TargetPlayer.Character:FindFirstChildOfClass("Humanoid")
                                                        if humanoid then
                                                            local moveDirection = humanoid.MoveDirection
                                                            predictedPosition = bodyPart.Position + (moveDirection * Vector3.new(
                                                                shared.paradox.Camera.Prediction.X,
                                                                shared.paradox.Camera.Prediction.Y,
                                                                shared.paradox.Camera.Prediction.Z
                                                            ))
                                                        end
                                                    else
                                                        local targetVelocity = TargetPlayer.Character.HumanoidRootPart.Velocity
                                                        predictedPosition = bodyPart.Position + (targetVelocity * Vector3.new(
                                                            shared.paradox.Camera.Prediction.X,
                                                            shared.paradox.Camera.Prediction.Y,
                                                            shared.paradox.Camera.Prediction.Z
                                                        ))
                                                    end
            
                                                    if shared.paradox.Camera.Configurations.Value ~= 0 then
                                                        if predictedPosition then
                                                            local currentPosition = Camera.CFrame.Position
                                                            local randomness = math.random(95, 105) / 100
                                                            local smoothFactor = shared.paradox.Camera.Configurations.Value * randomness
            
                                                            local DesiredCFrame = CFrame.new(currentPosition, predictedPosition)
                                                            Camera.CFrame = Camera.CFrame:Lerp(DesiredCFrame, smoothFactor)
                                                        end
                                                    end
                                                end
                                            end
                                        end
                                    end
                                end
                            end
                        else
                            if shared.paradox.Camera.Configurations.ThirdPerson == false then
                                if IsFirstPerson() then
                                    if IsAlignedWithCamera(TargetPlayer) then
                                        local head = TargetPlayer.Character:FindFirstChild("Head")
                                        local lowerTorso = TargetPlayer.Character:FindFirstChild("LowerTorso")
                                        local bodyPart = nil
            
                                        if head and lowerTorso then
                                            local distanceToHead = GetDistanceFromMouse(head)
                                            local distanceToLowerTorso = GetDistanceFromMouse(lowerTorso)
            
                                            if distanceToHead < distanceToLowerTorso then
                                                bodyPart = head
                                            else
                                                bodyPart = lowerTorso
                                            end
                                        elseif head then
                                            bodyPart = head
                                        elseif lowerTorso then
                                            bodyPart = lowerTorso
                                        end
            
                                        if bodyPart and IsTargetVisible(TargetPlayer, bodyPart) then
                                            local targetPosition = bodyPart.Position
                                            local playerPosition = TargetPlayer.Character.HumanoidRootPart.Position
                                            local distanceToTarget = (targetPosition - playerPosition).Magnitude
            
                                            if distanceToTarget <= math.sqrt(FOV.X^2 + FOV.Y^2 + FOV.Z^2) then
                                                local predictedPosition
            
                                                if shared.paradox.Camera.Resolver then
                                                    local humanoid = TargetPlayer.Character:FindFirstChildOfClass("Humanoid")
                                                    if humanoid then
                                                        local moveDirection = humanoid.MoveDirection
                                                        predictedPosition = bodyPart.Position + (moveDirection * Vector3.new(
                                                            shared.paradox.Camera.Prediction.X,
                                                            shared.paradox.Camera.Prediction.Y,
                                                            shared.paradox.Camera.Prediction.Z
                                                        ))
                                                    end
                                                else
                                                    local targetVelocity = TargetPlayer.Character.HumanoidRootPart.Velocity
                                                    predictedPosition = bodyPart.Position + (targetVelocity * Vector3.new(
                                                        shared.paradox.Camera.Prediction.X,
                                                        shared.paradox.Camera.Prediction.Y,
                                                        shared.paradox.Camera.Prediction.Z
                                                    ))
                                                end
            
                                                if shared.paradox.Camera.Configurations.Value ~= 0 then
                                                   if predictedPosition then
                                                       local currentPosition = Camera.CFrame.Position
                                                       local randomness = math.random(95, 105) / 100
                                                      
                                                       local smoothFactor = (shared.paradox.Camera.Configurations.Value * randomness) * 0.1  
                                               
                                                       local DesiredCFrame = CFrame.new(currentPosition, predictedPosition)
                                                       Camera.CFrame = Camera.CFrame:Lerp(DesiredCFrame, smoothFactor)
                                                   end
                                               end 
                                            end
                                        end
                                    end
                                end
                            end
                        end
                    end
                end
            end)
            
            
           
           
           
           
    
    
    
            UserInputService.InputEnded:Connect(function(input, isProcessed)
                if input.KeyCode == Enum.KeyCode[shared.paradox.Keys.Target:upper()] and shared.paradox.Camera.Method == "hold" then  -- Updated to Keybind
                    holdingMouseButton = false
                end
            end)
    
    
    
    
    




            
    
    local G                   = game
    local Run_Service         = G:GetService("RunService")
    local Players             = G:GetService("Players")
    local UserInputService    = G:GetService("UserInputService")
    local Local_Player        = Players.LocalPlayer
    local Mouse               = Local_Player:GetMouse()
    local Current_Camera      = G:GetService("Workspace").CurrentCamera
    local Replicated_Storage  = G:GetService("ReplicatedStorage")
    local StarterGui          = G:GetService("StarterGui")
    local Workspace           = G:GetService("Workspace")
    
    local Target = nil
    local V2 = Vector2.new
    local holdingMouseButton = false
    local lastToolUse = 0
    local FovParts = {}
    
    
    if not game:IsLoaded() then
    game.Loaded:Wait()
    end
    
    
    local Games = {
    DaHood = {
    ID = 2,
    Details = {
      Name = "Da Hood",
      Argument = "UpdateMousePosI2",
      Remote = "MainEvent",
      BodyEffects = "K.O"
    }
    },
    DaHoodMacro = {
    ID = 16033173781,
    Details = {
      Name = "Da Hood Macro",
      Argument = "UpdateMousePosI2",
      Remote = "MainEvent",
      BodyEffects = "K.O"
    }
    },
    DaHoodVC = {
    ID = 7213786345,
    Details = {
      Name = "Da Hood VC",
      Argument = "UpdateMousePosI",
      Remote = "MainEvent",
      BodyEffects = "K.O"
    }
    },
    HoodCustoms = {
    ID = 9825515356,
    Details = {
      Name = "Hood Customs",
      Argument = "Shoot",
      Remote = "MainEvent"
    }
    },
    HoodModded = {
    ID = 5602055394,
    Details = {
      Name = "Hood Modded",
      Argument = "MousePos",
      Remote = "Bullets"
    }
    },
    DaDownhillPSXbox = {
    ID = 77369032494150,
    Details = {
      Name = "Da Downhill [PS/Xbox]",
      Argument = "MOUSE",
      Remote = "MAINEVENT"
    }
    },
    DaBank = {
    ID = 132023669786646,
    Details = {
      Name = "Da Bank",
      Argument = "MOUSE",
      Remote = "MAINEVENT"
    }
    },
    DaUphill = {
    ID = 84366677940861,
    Details = {
      Name = "Da Uphill",
      Argument = "MOUSE",
      Remote = "MAINEVENT"
    }
    },
    DaHoodBotAimTrainer = {
    ID = 14487637618,
    Details = {
      Name = "Da Hood Bot Aim Trainer",
      Argument = "MOUSE",
      Remote = "MAINEVENT"
    }
    },
    HoodAimTrainer1v1 = {
    ID = 11143225577,
    Details = {
      Name = "1v1 Hood Aim Trainer",
      Argument = "UpdateMousePos",
      Remote = "MainEvent"
    }
    },
    HoodAim = {
    ID = 14413712255,
    Details = {
      Name = "Hood Aim",
      Argument = "MOUSE",
      Remote = "MAINEVENT"
    }
    },
    MoonHood = {
    ID = 14472848239,
    Details = {
      Name = "Moon Hood",
      Argument = "MoonUpdateMousePos",
      Remote = "MainEvent"
    }
    },
    DaStrike = {
    ID = 15186202290,
    Details = {
      Name = "Da Strike",
      Argument = "MOUSE",
      Remote = "MAINEVENT"
    }
    },
    OGDaHood = {
    ID = 17319408836,
    Details = {
      Name = "OG Da Hood",
      Argument = "UpdateMousePos",
      Remote = "MainEvent",
      BodyEffects = "K.O"
    }
    },
    DahAimTrainner = {
    ID = 12804651854,
    Details = {
      Name = "DahAimTrainner",
      Argument = "UpdateMousePos",
      Remote = "MainEvent",
      BodyEffects = "K.O"
    }
    },
    MekoHood = {
    ID = 17780567699,
    Details = {
      Name = "Meko Hood",
      Argument = "UpdateMousePos",
      Remote = "MainEvent",
      BodyEffects = "K.O"
    }
    },
    DaCraft = {
    ID = 128258288926907,
    Details = {
      Name = "Da Craft",
      Argument = "UpdateMousePos",
      Remote = "MainEvent",
      BodyEffects = "K.O"
    }
    },
    NewHood = {
    ID = 17809101348,
    Details = {
      Name = "New Hood",
      Argument = "UpdateMousePos",
      Remote = "MainEvent",
      BodyEffects = "K.O"
    }
    },
    NewHood2 = {
    ID = 99991590066512,
    Details = {
      Name = "New Hood",
      Argument = "UpdateMousePos",
      Remote = "MainEvent",
      BodyEffects = "K.O"
    }    
    },
    DeeHood = {
    ID = 135203948315459,
    Details = {
      Name = "Dee Hood",
      Argument = "UpdateMousePos",
      Remote = "MainEvent",
      BodyEffects = "K.O"
    }
    },
    DerHood = {
    ID = 76459865572745,
    Details = {
      Name = "Der Hood",
      Argument = "DERHOODMOUSEPOS666^",
      Remote = "MainRemoteEvent",
      BodyEffects = "K.O"
    }
    },
    DeaHood = {
    ID = 75871894939662,
    Details = {
      Name = "Dea Hood",
      Argument = "DEAHOODMOUSEPOSx3^3",
      Remote = "MainRemoteEvent",
      BodyEffects = "K.O"
    }
    },
    DasHood0Delay = {
    ID = 115928489472637,
    Details = {
      Name = "Ugc",
      Argument = "UpdateMousePos",
      Remote = "MainEvent",
      BodyEffects = "K.O"
    }
    },
    DelHoodAim = {
    ID = 88582222971530,
    Details = {
      Name = "Del Hood Aim",
      Argument = "UpdateMousePos",
      Remote = "MainEvent",
      BodyEffects = "K.O"
    }
    },
    DaKitty = {
    ID = 113357850268933,
    Details = {
      Name = "Da kitty",
      Argument = "UpdateMousePos",
      Remote = "MainEvent",
      BodyEffects = "K.O"
    }
    }
    }
    
    
    local gameId = game.PlaceId
    local gameSettings
    
    
    for _, gameData in pairs(Games) do
    if gameData.ID == gameId then
    gameSettings = gameData.Details
    break
    end
    end
    
    if not gameSettings then
    Players.LocalPlayer:Kick("Unsupported game")
    return
    end
    
    local RemoteEvent = gameSettings.Remote
    local Argument = gameSettings.Argument
    local BodyEffects = gameSettings.BodyEffects or "K.O"
    
    
    local ReplicatedStorage = game:GetService("ReplicatedStorage")
    local MainEvent = ReplicatedStorage:FindFirstChild(RemoteEvent)
    
    if not MainEvent then
    Players.LocalPlayer:Kick("Are you sure this is the correct game?")
    return
    end
    
    local function isArgumentValid(argumentName)
    return argumentName == Argument
    end
    
    local argumentToCheck = Argument
    
    if isArgumentValid(argumentToCheck) then
    MainEvent:FireServer(argumentToCheck)
    else
    Players.LocalPlayer:Kick("Invalid argument")
    end
    
    
    local function clearFovParts()
    
    for _, part in ipairs(FovParts) do
    part:Destroy()
    end
    FovParts = {}  
    end
    
    
    local scalingFactor = 35 / 5.5


local function calculateFov(X, Y, Z)
    local baseSize = 3.5  
    local baseFov = 12   

    local sizeProduct = X * Y * Z
    local calculatedFov = baseFov * (sizeProduct / (baseSize * baseSize * baseSize))

    return calculatedFov
end


local function getCurrentWeapon()
    local character = Local_Player.Character
    if not character then return nil end

    local tool = character:FindFirstChildOfClass("Tool")
    if tool then
        return tool.Name
    end

    return nil
end


local function updateFov()
    local currentWeapon = getCurrentWeapon()
    local dynamicFovSize = 3.5  

    if IsTargeting then
       
        if currentWeapon == "db" then
            dynamicFovSize = shared.paradox.FOV['DoubleBarrelSG'][1] or 3.5  
        elseif currentWeapon == "rev" then
            dynamicFovSize = shared.paradox.FOV['Revolver'][1] or 3.5 
        elseif currentWeapon == "Tactical SG" then
            dynamicFovSize = shared.paradox.FOV['TacticalShotgun'][1] or 3.5  
        elseif currentWeapon == "Rifle" then
            dynamicFovSize = shared.paradox.FOV['Rifle'][1] or 3.5   
        elseif currentWeapon == "AUG" then
            dynamicFovSize = shared.paradox.FOV['AUG'][1] or 3.5  
        end

        
        dynamicFovSize = dynamicFovSize * scalingFactor

        
        for _, player in pairs(Players:GetPlayers()) do
            if player.Character and player ~= Local_Player then
                local success, isDead = pcall(function() return Death(player) end)

                if success and not isDead then
                    local closestPart, closestPoint = pcall(function() return GetClosestHitPoint(player.Character) end)

                    if closestPart and closestPoint then
                        local screenPoint = Current_Camera:WorldToScreenPoint(closestPoint)
                        local distance = (V2(screenPoint.X, screenPoint.Y) - V2(Mouse.X, Mouse.Y)).Magnitude

                        if distance <= dynamicFovSize then
                           
                        end
                    end
                end
            end
        end
    end
end

Run_Service.RenderStepped:Connect(updateFov)


local function isPartInFovAndVisible(part)
    if not shared.paradox.Camera.Enabled or not IsTargeting or not TargetPlayer then
        return false
    end

    local currentWeapon = getCurrentWeapon()
    local dynamicFovSize = 3.5 

  
    if currentWeapon == "db" then
        dynamicFovSize = shared.paradox.FOV['DoubleBarrelSG'][1] or 3.5  
    elseif currentWeapon == "rev" then
        dynamicFovSize = shared.paradox.FOV['Revolver'][1] or 3.5  
    elseif currentWeapon == "Tactical SG" then
        dynamicFovSize = shared.paradox.FOV['TacticalShotgun'][1] or 3.5  
    elseif currentWeapon == "Rifle" then
        dynamicFovSize = shared.paradox.FOV['Rifle'][1] or 3.5    
    elseif currentWeapon == "AUG" then
        dynamicFovSize = shared.paradox.FOV['AUG'][1] or 3.5  
    end

    
    dynamicFovSize = dynamicFovSize * scalingFactor

    
    local screenPoint, onScreen = Current_Camera:WorldToScreenPoint(part.Position)
    local distance = (V2(screenPoint.X, screenPoint.Y) - V2(Mouse.X, Mouse.Y)).Magnitude

    return onScreen and distance <= dynamicFovSize
end


local function isPartVisible(part)
    if not shared.paradox['Silent'].WallCheck then
        return true
    end
    local origin = Current_Camera.CFrame.Position
    local direction = (part.Position - origin).Unit * (part.Position - origin).Magnitude
    local ray = Ray.new(origin, direction)
    local hit = Workspace:FindPartOnRayWithIgnoreList(ray, {Local_Player.Character, part.Parent})
    return hit == part or not hit
end

    
    
    
    
    
    local function GetClosestHitPoint(character)
    local closestPart = nil
    local closestPoint = nil
    local shortestDistance = math.huge
    
    local AllBodyParts = {
    "Head", "UpperTorso", "LowerTorso", "HumanoidRootPart", "LeftHand", "RightHand", 
    "LeftLowerArm", "RightLowerArm", "LeftUpperArm", "RightUpperArm", "LeftFoot", 
    "LeftLowerLeg", "LeftUpperLeg", "RightLowerLeg", "RightUpperLeg", "RightFoot"
    }
    
    for _, bodyPartName in pairs(AllBodyParts) do
    local part = character:FindFirstChild(bodyPartName)
    
    if part and part:IsA("BasePart") and isPartInFovAndVisible(part) and isPartVisible(part) then
      local screenPoint, onScreen = Current_Camera:WorldToScreenPoint(part.Position)
      local distance = (V2(screenPoint.X, screenPoint.Y) - V2(Mouse.X, Mouse.Y)).Magnitude
    
      if distance < shortestDistance then
          closestPart = part
          closestPoint = part.Position  
          shortestDistance = distance
      end
    end
    end
    
    return closestPart, closestPoint
    end
    
    
    local OldTime = shared.paradox['Silent'].Prediction

    local function GetVelocity(player, part)
        if player and player.Character then
            local humanoid = player.Character:FindFirstChildOfClass("Humanoid")
            if not humanoid then return Vector3.new(0, 0, 0) end
    
            local velocity = player.Character[part].Velocity
    
           
            local distortionX = shared.paradox['Silent'].Prediction.X
            local distortionY = shared.paradox['Silent'].Prediction.Y
            local distortionZ = shared.paradox['Silent'].Prediction.Z
    
        
            local adjustedVelocity = Vector3.new(
                velocity.X * distortionX,
                velocity.Y * distortionY,
                velocity.Z * distortionZ
            )
    
            
            if humanoid:GetState() == Enum.HumanoidStateType.Physics then
              
                adjustedVelocity = adjustedVelocity + Vector3.new(0, -9.81 * distortionY, 0)
            end
    
         
            if adjustedVelocity.Y < -30 then
                shared.paradox['Silent'].Prediction = { X = 0, Y = 0, Z = 0 }
                return adjustedVelocity
            elseif adjustedVelocity.Magnitude > 50 then
             
                return humanoid.MoveDirection * 16 * distortionX
            else
           
                shared.paradox['Silent'].Prediction = OldTime
                return adjustedVelocity
            end
        end
        return Vector3.new(0, 0, 0) 
    end
    

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    local function clearFovParts()
        for _, part in ipairs(FovParts) do
            part:Destroy()
        end
        FovParts = {}
    end
    
    local LastTarget = nil
    
   
    local function IsVisible(targetPosition)
        local character = game.Players.LocalPlayer.Character
        if not character then return false end
    
        local origin = character.Head.Position
        local direction = (targetPosition - origin).Unit * 1000 
    
        local rayParams = RaycastParams.new()
        rayParams.FilterType = Enum.RaycastFilterType.Blacklist
        rayParams.FilterDescendantsInstances = {character}
    
        local success, raycastResult = pcall(function()
            return workspace:Raycast(origin, direction, rayParams)
        end)
    
       
        return success and raycastResult and (raycastResult.Position - targetPosition).Magnitude < 5
    end
    
   
    RunService.RenderStepped:Connect(function()
        local character = game.Players.LocalPlayer.Character
        if character and character:FindFirstChild("Humanoid") then
            local humanoid = character.Humanoid
    
            local success, _ = pcall(function()
                if humanoid.Health <= 1 then
                    TargetPlayer = nil
                    IsTargeting = false
                    LastTarget = nil
                    return
                end
            end)
        end
    
       
        if shared.paradox['Silent'].Enabled and IsTargeting then
            if TargetPlayer then
                if TargetPlayer.Character then
                    local targetPos = TargetPlayer.Character.Head.Position
    
                 
                    local success, _ = pcall(function()
                        if TargetPlayer.Character.Humanoid.Health < 1 then
                            TargetPlayer = nil
                            IsTargeting = false
                            LastTarget = nil
                            return
                        end
                    end)
    
                    local success2, _ = pcall(function()
                        if Death(TargetPlayer) then
                            TargetPlayer = nil
                            IsTargeting = false
                            LastTarget = nil
                            return
                        end
                    end)
    
                
                    local success3, closestPart, closestPoint = pcall(function()
                        if not IsVisible(targetPos) then
                            IsTargeting = false
                            LastTarget = TargetPlayer
                            return
                        end
                        return GetClosestHitPoint(TargetPlayer.Character)
                    end)
    
                    if success3 and closestPart and closestPoint then
                        local velocity = GetVelocity(TargetPlayer, closestPart.Name)
    
                        local TimeX = shared.paradox['Silent'].Prediction.X
                        local TimeY = shared.paradox['Silent'].Prediction.Y
                        local TimeZ = shared.paradox['Silent'].Prediction.Z
    
                        local adjustedVelocity = velocity * Vector3.new(TimeX, TimeY, TimeZ)
    
                      
                        local success4, _ = pcall(function()
                            Replicated_Storage[RemoteEvent]:FireServer(Argument, closestPoint + adjustedVelocity)
                        end)
                    end
                end
            end
        elseif LastTarget and LastTarget.Character then
            local lastTargetPos = LastTarget.Character.Head.Position
    
         
            local success5, _ = pcall(function()
                if IsVisible(lastTargetPos) then
                    TargetPlayer = LastTarget
                    IsTargeting = true
                    LastTarget = nil
                end
            end)
        else
          
        end
    end)
    
  
    local function HookTool(tool)
        if tool:IsA("Tool") then
            tool.Activated:Connect(function()
                if tick() - lastToolUse > 0.1 then  
                    lastToolUse = tick()
    
                    local success, target = pcall(function()
                        return TargetPlayer
                    end)
    
                    if success and target and target.Character then
                        local success2, closestPart, closestPoint = pcall(function()
                            return GetClosestHitPoint(target.Character)
                        end)
    
                        if success2 and closestPart and closestPoint then
                            local success3, velocity = pcall(function()
                                return GetVelocity(target, closestPart.Name)
                            end)
    
                            if success3 and velocity then
                                local TimeX = shared.paradox['Silent'].Prediction.X
                                local TimeY = shared.paradox['Silent'].Prediction.Y
                                local TimeZ = shared.paradox['Silent'].Prediction.Z
    
                                local adjustedVelocity = velocity * Vector3.new(TimeX, TimeY, TimeZ)
    
                               
                                local success4, _ = pcall(function()
                                    Replicated_Storage[RemoteEvent]:FireServer(Argument, closestPoint + adjustedVelocity)
                                end)
                            end
                        end
                    end
                end
            end)
        end
    end
    
    
    local function onCharacterAdded(character)
        character.ChildAdded:Connect(function(child)
            local success, _ = pcall(function()
                HookTool(child)
            end)
        end)
    
        for _, tool in pairs(character:GetChildren()) do
            local success, _ = pcall(function()
                HookTool(tool)
            end)
        end
    end
    
    local success, _ = pcall(function()
        Local_Player.CharacterAdded:Connect(onCharacterAdded)
    end)
    
    if Local_Player.Character then
        pcall(function()
            onCharacterAdded(Local_Player.Character)
        end)
    end
    
    
    
    
    
    end
